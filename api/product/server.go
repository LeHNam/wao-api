// Package product provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package product

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Product defines model for Product.
type Product struct {
	Code    string          `json:"code"`
	Id      string          `json:"id"`
	Img     string          `json:"img"`
	Name    string          `json:"name"`
	Options []ProductOption `json:"options"`
}

// ProductCreateRequest defines model for ProductCreateRequest.
type ProductCreateRequest struct {
	Code    string                       `json:"code"`
	Img     string                       `json:"img"`
	Name    string                       `json:"name"`
	Options []ProductOptionCreateRequest `json:"options"`
}

// ProductOption defines model for ProductOption.
type ProductOption struct {
	Code     string  `json:"code"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	Price    float32 `json:"price"`
	Quantity int     `json:"quantity"`
}

// ProductOptionCreateRequest defines model for ProductOptionCreateRequest.
type ProductOptionCreateRequest struct {
	Code     string  `json:"code"`
	Name     string  `json:"name"`
	Price    float32 `json:"price"`
	Quantity int     `json:"quantity"`
}

// ProductPaginateResponseData defines model for ProductPaginateResponseData.
type ProductPaginateResponseData struct {
	Items []Product `json:"items"`
	Limit int       `json:"limit"`
	Page  int       `json:"page"`
	Pages int       `json:"pages"`
	Total int       `json:"total"`
}

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	Data    Product `json:"data"`
	Message *string `json:"message,omitempty"`
}

// ProductUpdateRequest defines model for ProductUpdateRequest.
type ProductUpdateRequest struct {
	Code    *string                       `json:"code,omitempty"`
	Img     *string                       `json:"img,omitempty"`
	Name    *string                       `json:"name,omitempty"`
	Options *[]ProductOptionCreateRequest `json:"options,omitempty"`
}

// GetProductParams defines parameters for GetProduct.
type GetProductParams struct {
	Page   int     `form:"page" json:"page"`
	Limit  int     `form:"limit" json:"limit"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostProductJSONRequestBody defines body for PostProduct for application/json ContentType.
type PostProductJSONRequestBody = ProductCreateRequest

// PutProductIdJSONRequestBody defines body for PutProductId for application/json ContentType.
type PutProductIdJSONRequestBody = ProductUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all products
	// (GET /product)
	GetProduct(c *gin.Context, params GetProductParams)
	// Create new product
	// (POST /product)
	PostProduct(c *gin.Context)
	// Delete product by ID
	// (DELETE /product/{id})
	DeleteProductId(c *gin.Context, id string)
	// Get product by ID
	// (GET /product/{id})
	GetProductId(c *gin.Context, id string)
	// Update product by ID (including options)
	// (PUT /product/{id})
	PutProductId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProduct(c, params)
}

// PostProduct operation middleware
func (siw *ServerInterfaceWrapper) PostProduct(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProduct(c)
}

// DeleteProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductId(c, id)
}

// GetProductId operation middleware
func (siw *ServerInterfaceWrapper) GetProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductId(c, id)
}

// PutProductId operation middleware
func (siw *ServerInterfaceWrapper) PutProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/product", wrapper.GetProduct)
	router.POST(options.BaseURL+"/product", wrapper.PostProduct)
	router.DELETE(options.BaseURL+"/product/:id", wrapper.DeleteProductId)
	router.GET(options.BaseURL+"/product/:id", wrapper.GetProductId)
	router.PUT(options.BaseURL+"/product/:id", wrapper.PutProductId)
}

type GetProductRequestObject struct {
	Params GetProductParams
}

type GetProductResponseObject interface {
	VisitGetProductResponse(w http.ResponseWriter) error
}

type GetProduct200JSONResponse ProductPaginateResponseData

func (response GetProduct200JSONResponse) VisitGetProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProduct400JSONResponse ErrorResponse

func (response GetProduct400JSONResponse) VisitGetProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProductRequestObject struct {
	Body *PostProductJSONRequestBody
}

type PostProductResponseObject interface {
	VisitPostProductResponse(w http.ResponseWriter) error
}

type PostProduct201JSONResponse ProductResponse

func (response PostProduct201JSONResponse) VisitPostProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProduct400JSONResponse ErrorResponse

func (response PostProduct400JSONResponse) VisitPostProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteProductIdResponseObject interface {
	VisitDeleteProductIdResponse(w http.ResponseWriter) error
}

type DeleteProductId204Response struct {
}

func (response DeleteProductId204Response) VisitDeleteProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProductId404JSONResponse ErrorResponse

func (response DeleteProductId404JSONResponse) VisitDeleteProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProductIdRequestObject struct {
	Id string `json:"id"`
}

type GetProductIdResponseObject interface {
	VisitGetProductIdResponse(w http.ResponseWriter) error
}

type GetProductId200JSONResponse ProductResponse

func (response GetProductId200JSONResponse) VisitGetProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductId404JSONResponse ErrorResponse

func (response GetProductId404JSONResponse) VisitGetProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutProductIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutProductIdJSONRequestBody
}

type PutProductIdResponseObject interface {
	VisitPutProductIdResponse(w http.ResponseWriter) error
}

type PutProductId200JSONResponse ProductResponse

func (response PutProductId200JSONResponse) VisitPutProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutProductId404JSONResponse ErrorResponse

func (response PutProductId404JSONResponse) VisitPutProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all products
	// (GET /product)
	GetProduct(ctx context.Context, request GetProductRequestObject) (GetProductResponseObject, error)
	// Create new product
	// (POST /product)
	PostProduct(ctx context.Context, request PostProductRequestObject) (PostProductResponseObject, error)
	// Delete product by ID
	// (DELETE /product/{id})
	DeleteProductId(ctx context.Context, request DeleteProductIdRequestObject) (DeleteProductIdResponseObject, error)
	// Get product by ID
	// (GET /product/{id})
	GetProductId(ctx context.Context, request GetProductIdRequestObject) (GetProductIdResponseObject, error)
	// Update product by ID (including options)
	// (PUT /product/{id})
	PutProductId(ctx context.Context, request PutProductIdRequestObject) (PutProductIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetProduct operation middleware
func (sh *strictHandler) GetProduct(ctx *gin.Context, params GetProductParams) {
	var request GetProductRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProduct(ctx, request.(GetProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductResponseObject); ok {
		if err := validResponse.VisitGetProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProduct operation middleware
func (sh *strictHandler) PostProduct(ctx *gin.Context) {
	var request PostProductRequestObject

	var body PostProductJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProduct(ctx, request.(PostProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostProductResponseObject); ok {
		if err := validResponse.VisitPostProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProductId operation middleware
func (sh *strictHandler) DeleteProductId(ctx *gin.Context, id string) {
	var request DeleteProductIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductId(ctx, request.(DeleteProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProductIdResponseObject); ok {
		if err := validResponse.VisitDeleteProductIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductId operation middleware
func (sh *strictHandler) GetProductId(ctx *gin.Context, id string) {
	var request GetProductIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductId(ctx, request.(GetProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductIdResponseObject); ok {
		if err := validResponse.VisitGetProductIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutProductId operation middleware
func (sh *strictHandler) PutProductId(ctx *gin.Context, id string) {
	var request PutProductIdRequestObject

	request.Id = id

	var body PutProductIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutProductId(ctx, request.(PutProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutProductIdResponseObject); ok {
		if err := validResponse.VisitPutProductIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW0W7bNhT9FeFuDxug2c6aJ721zVAEGNAgQJ8CY2DEK5uFRCqXl+sMw/8+kBStKJZj",
	"O81cZE82SPHw3nMOD7mG0jSt0ajZQrEGWy6xEeHvH0SGbtG2Rlv0Ay2ZFokVhmn00/4Pr1qEAiyT0gvY",
	"5NCgtWKBI3ObHAgfnCKUUNxtP8w7sHmeFpj7r1iyB7shI13Ju/uXRuLo9kqODzeL0XEtmnEc07IyOuyl",
	"GJvw52fCCgr4adqzNu0om3aVfg7LPECHKIjEaqd3JaHbO4+txAr7bZ8h4yOhYLzFB4f2JGbOSsGwykN8",
	"vJCKju3vdsdeClpSZZipDDWCoYCqNoJhW5J2zT2S//TBCc2KV49wlGZc+NnD6m9Xpz0Pdv1SG5y515e3",
	"eSMWSocWYwhdCRa7fW6deYpFd/2YQ60axWMN5dAO8+zJjB2fYsOiPoKg+F2C6jZL5eRdW8/QtD+jZUfY",
	"kYQcHdwB95mKvrTyfxFQT/rzQ0pXJlCLtiTVpQ98vP1ylb2/uc4qQ1kbN7GZ0DLjJSrKUp05sOLaY3aV",
	"hEXfFC+zz9tP/kayEfZiMpvMYp+oRauggHeT2eRdMAkvQ7vTtr8hFxh+PNfCo11LKOATctLYLyPRICNZ",
	"KO7WoPwuDw5plfKoSPbr9WZymHcvg9h6JVzNUFzkI9YeB01mPgZ1djysNeRRR1CgDOrKvx7nV2/nPXAo",
	"qFwOAJ+unPse4nkL9P8+m0VLa0Yd2BdtW6sy8D/9auPl1OMd4c7R2AvmG5ruT2U5M1Xvt+CjNq7u3iCX",
	"r1je8EE4UtAHIbPtcdrkYLF0FC6JuzXcoyCk946XUNzNPY/WNY2gVepE1PW2FS+ZWHiPQrL3PId/fmuR",
	"GmVtPPPbuQmhkDD3aWzsyAm4MfbREaBY4QcjV6+t3JNEGcamN/xmxz0Xr13DcwKl0OnORmZdWaK1lavr",
	"1dtxS2Q50/gt+eVEu8T2Ye53TfE5XSu5iQlSI+Ouia7CeMfgtdyTpT6W+zwJz7z9kXc4Wy53r5qkYaxz",
	"TMPL82mYitGGs8o4LU9TMnKaVMzuV9n11YladnL5w3/g9juXZrMfcaIlslD1W9P/E/J3id/nvhuLfXcG",
	"6f+zu2T4hj7qLvkhznOhzredQ5HroRWzX5QuayeVXqTn+68n2jNS4++ZzebfAAAA///qroIcaRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
