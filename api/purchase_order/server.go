// Package purchase_order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package purchase_order

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// PurchaseOrder defines model for PurchaseOrder.
type PurchaseOrder struct {
	CreatedAt   *time.Time           `json:"created_at,omitempty"`
	CreatedBy   *openapi_types.UUID  `json:"created_by,omitempty"`
	Currency    string               `json:"currency"`
	DeletedAt   *time.Time           `json:"deleted_at"`
	Id          openapi_types.UUID   `json:"id"`
	Items       *[]PurchaseOrderItem `json:"items,omitempty"`
	Notes       *string              `json:"notes"`
	OrderDate   time.Time            `json:"order_date"`
	OrderNumber string               `json:"order_number"`
	Status      string               `json:"status"`
	Timezone    *string              `json:"timezone,omitempty"`
	TotalAmount float32              `json:"total_amount"`
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
	UpdatedBy   *openapi_types.UUID  `json:"updated_by,omitempty"`
}

// PurchaseOrderItem defines model for PurchaseOrderItem.
type PurchaseOrderItem struct {
	CreatedAt         *time.Time          `json:"created_at,omitempty"`
	CreatedBy         *openapi_types.UUID `json:"created_by,omitempty"`
	Currency          string              `json:"currency"`
	DeletedAt         *time.Time          `json:"deleted_at"`
	Id                openapi_types.UUID  `json:"id"`
	ProductId         openapi_types.UUID  `json:"product_id"`
	ProductName       string              `json:"product_name"`
	ProductOptionId   openapi_types.UUID  `json:"product_option_id"`
	ProductOptionName string              `json:"product_option_name"`
	PurchaseOrderId   openapi_types.UUID  `json:"purchase_order_id"`
	Quantity          int                 `json:"quantity"`
	TotalPrice        float32             `json:"total_price"`
	UnitPrice         float32             `json:"unit_price"`
	UpdatedAt         *time.Time          `json:"updated_at,omitempty"`
	UpdatedBy         *openapi_types.UUID `json:"updated_by,omitempty"`
}

// PostPurchaseOrderJSONBody defines parameters for PostPurchaseOrder.
type PostPurchaseOrderJSONBody struct {
	Items []struct {
		Currency        string             `json:"currency"`
		ProductId       openapi_types.UUID `json:"product_id"`
		ProductOptionId openapi_types.UUID `json:"product_option_id"`
		Quantity        int                `json:"quantity"`
	} `json:"items"`
}

// PatchPurchaseOrderIdStatusJSONBody defines parameters for PatchPurchaseOrderIdStatus.
type PatchPurchaseOrderIdStatusJSONBody struct {
	Status string `json:"status"`
}

// PostPurchaseOrderJSONRequestBody defines body for PostPurchaseOrder for application/json ContentType.
type PostPurchaseOrderJSONRequestBody PostPurchaseOrderJSONBody

// PatchPurchaseOrderIdStatusJSONRequestBody defines body for PatchPurchaseOrderIdStatus for application/json ContentType.
type PatchPurchaseOrderIdStatusJSONRequestBody PatchPurchaseOrderIdStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of purchase orders
	// (GET /purchase-order)
	GetPurchaseOrder(c *gin.Context)
	// Create a new purchase order
	// (POST /purchase-order)
	PostPurchaseOrder(c *gin.Context)
	// Get details of a specific purchase order
	// (GET /purchase-order/{id})
	GetPurchaseOrderId(c *gin.Context, id openapi_types.UUID)
	// Update the status of a purchase order
	// (PATCH /purchase-order/{id}/status)
	PatchPurchaseOrderIdStatus(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPurchaseOrder operation middleware
func (siw *ServerInterfaceWrapper) GetPurchaseOrder(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPurchaseOrder(c)
}

// PostPurchaseOrder operation middleware
func (siw *ServerInterfaceWrapper) PostPurchaseOrder(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPurchaseOrder(c)
}

// GetPurchaseOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetPurchaseOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPurchaseOrderId(c, id)
}

// PatchPurchaseOrderIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchPurchaseOrderIdStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchPurchaseOrderIdStatus(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/purchase-order", wrapper.GetPurchaseOrder)
	router.POST(options.BaseURL+"/purchase-order", wrapper.PostPurchaseOrder)
	router.GET(options.BaseURL+"/purchase-order/:id", wrapper.GetPurchaseOrderId)
	router.PATCH(options.BaseURL+"/purchase-order/:id/status", wrapper.PatchPurchaseOrderIdStatus)
}

type GetPurchaseOrderRequestObject struct {
}

type GetPurchaseOrderResponseObject interface {
	VisitGetPurchaseOrderResponse(w http.ResponseWriter) error
}

type GetPurchaseOrder200JSONResponse []PurchaseOrder

func (response GetPurchaseOrder200JSONResponse) VisitGetPurchaseOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPurchaseOrder500JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetPurchaseOrder500JSONResponse) VisitGetPurchaseOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPurchaseOrderRequestObject struct {
	Body *PostPurchaseOrderJSONRequestBody
}

type PostPurchaseOrderResponseObject interface {
	VisitPostPurchaseOrderResponse(w http.ResponseWriter) error
}

type PostPurchaseOrder200JSONResponse struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

func (response PostPurchaseOrder200JSONResponse) VisitPostPurchaseOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPurchaseOrder400JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostPurchaseOrder400JSONResponse) VisitPostPurchaseOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPurchaseOrder500JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostPurchaseOrder500JSONResponse) VisitPostPurchaseOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPurchaseOrderIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetPurchaseOrderIdResponseObject interface {
	VisitGetPurchaseOrderIdResponse(w http.ResponseWriter) error
}

type GetPurchaseOrderId200JSONResponse PurchaseOrder

func (response GetPurchaseOrderId200JSONResponse) VisitGetPurchaseOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPurchaseOrderId404JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetPurchaseOrderId404JSONResponse) VisitGetPurchaseOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPurchaseOrderId500JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetPurchaseOrderId500JSONResponse) VisitGetPurchaseOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchPurchaseOrderIdStatusRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchPurchaseOrderIdStatusJSONRequestBody
}

type PatchPurchaseOrderIdStatusResponseObject interface {
	VisitPatchPurchaseOrderIdStatusResponse(w http.ResponseWriter) error
}

type PatchPurchaseOrderIdStatus200JSONResponse struct {
	Success *bool `json:"success,omitempty"`
}

func (response PatchPurchaseOrderIdStatus200JSONResponse) VisitPatchPurchaseOrderIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchPurchaseOrderIdStatus400JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PatchPurchaseOrderIdStatus400JSONResponse) VisitPatchPurchaseOrderIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchPurchaseOrderIdStatus404JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PatchPurchaseOrderIdStatus404JSONResponse) VisitPatchPurchaseOrderIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchPurchaseOrderIdStatus500JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PatchPurchaseOrderIdStatus500JSONResponse) VisitPatchPurchaseOrderIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of purchase orders
	// (GET /purchase-order)
	GetPurchaseOrder(ctx context.Context, request GetPurchaseOrderRequestObject) (GetPurchaseOrderResponseObject, error)
	// Create a new purchase order
	// (POST /purchase-order)
	PostPurchaseOrder(ctx context.Context, request PostPurchaseOrderRequestObject) (PostPurchaseOrderResponseObject, error)
	// Get details of a specific purchase order
	// (GET /purchase-order/{id})
	GetPurchaseOrderId(ctx context.Context, request GetPurchaseOrderIdRequestObject) (GetPurchaseOrderIdResponseObject, error)
	// Update the status of a purchase order
	// (PATCH /purchase-order/{id}/status)
	PatchPurchaseOrderIdStatus(ctx context.Context, request PatchPurchaseOrderIdStatusRequestObject) (PatchPurchaseOrderIdStatusResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPurchaseOrder operation middleware
func (sh *strictHandler) GetPurchaseOrder(ctx *gin.Context) {
	var request GetPurchaseOrderRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPurchaseOrder(ctx, request.(GetPurchaseOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPurchaseOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPurchaseOrderResponseObject); ok {
		if err := validResponse.VisitGetPurchaseOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPurchaseOrder operation middleware
func (sh *strictHandler) PostPurchaseOrder(ctx *gin.Context) {
	var request PostPurchaseOrderRequestObject

	var body PostPurchaseOrderJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPurchaseOrder(ctx, request.(PostPurchaseOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPurchaseOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPurchaseOrderResponseObject); ok {
		if err := validResponse.VisitPostPurchaseOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPurchaseOrderId operation middleware
func (sh *strictHandler) GetPurchaseOrderId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetPurchaseOrderIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPurchaseOrderId(ctx, request.(GetPurchaseOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPurchaseOrderId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPurchaseOrderIdResponseObject); ok {
		if err := validResponse.VisitGetPurchaseOrderIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchPurchaseOrderIdStatus operation middleware
func (sh *strictHandler) PatchPurchaseOrderIdStatus(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchPurchaseOrderIdStatusRequestObject

	request.Id = id

	var body PatchPurchaseOrderIdStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchPurchaseOrderIdStatus(ctx, request.(PatchPurchaseOrderIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchPurchaseOrderIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchPurchaseOrderIdStatusResponseObject); ok {
		if err := validResponse.VisitPatchPurchaseOrderIdStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/bMAz9K4K2Y5pka3fxrd1hyGkBhp2KIFAkOlFhS6pEdcgC//dBsvPhjyZOu7VD",
	"t5sTUzT5+B6fvaFc50YrUOhosqGOryBn8XLqLV8xB1+tABv+MFYbsCgh3uYWGIKYMwy/Um3zcEUFQ7hA",
	"mQMdUFwboAl1aKVa0mKwO7NY1854L0VnuLcWFI/BrZsCMjjxfOWzjC0yoAlaDx0PkKJXHRIhjz3vLt5b",
	"SGlC34326I0q6EY13CYIeUhR5WTWsnX4rTSWMJ6sUYc089BWf5zLM8rni3JyrQCHDL3rvBVy/tQKum9q",
	"ZNmc5dqrOuxpphnuS6keXQyoN+JsmmzP9KJJMaAW7r20IGhyS2NIrf9dtzUsG70ckG22e4Re3AHHUFF7",
	"pv+yHozVwnOcnxmuWN7Nqm2ANii1Ojdtderx7NXs5uX0e2a/90yhxEOspUJYlqwuuWOs5NBTBkriWfGv",
	"IZs2UrVZdw2qMd3uqdTar4N3APRRCYZ6pUp1HIfEwOGdKElUJbmeTuiAPoB1Uiua0A/D8XAct6EBxYyk",
	"Cb0cjoeXoUiGqyja0bblC711uSVEyIO0WWhhImhCvwDW7TCg54xWrhT/x/E47gCtEMrNyIzJJI8ZRncu",
	"FLQ116cZSdtEiih6x62MUNOEXpNMOiQ6Jdu2SGzLhcOfziyxvt1ycI4tuwRWdM6qXthEIVjFMuLAPoAl",
	"YK228agD7m2U2e2GLoBZsNceVzS5nRWzAXU+z5ldlxM41p3RrmNsU+065nbvweGNFutn4NF+JWi4wbFV",
	"/cT9ed56PLbAGuI/qfF+Gm0RtLFiIlLd0t7HBWcqnqmuxqhEv3V4ksXTGu1IZd6h76tX1NYNE6Ti9BuQ",
	"+ecIKmFEwY+GzmOixsIebaQoem/tSeQ3sywHDHsjFCND4cEPwvtRfIUovbDOyMEBYqeYNHsme8+whJMc",
	"FYBMZiVFr16NF42ilEaSaq/EG7GlEmQXnIkRZ4DLVPK+5B3tP8UMQ77qMLHwd4PH37ZfNC/D5t/hmI9+",
	"cjZsoop7eZ9wnnNwhxUutM6AqX5kKkdCqpdwUmVLfZat/zKL+L8K/sgq+B4nT3AFpORwuRBae6AofgUA",
	"AP//1On6gHUTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
