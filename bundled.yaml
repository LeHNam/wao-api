openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for managing users
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: /api/v1
tags:
  - name: product
  - name: user
paths:
  /product:
    post:
      summary: Create new product
      tags:
        - product
      security:
        - bearerAuth: []
      x-permissions:
        - product.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List all products
      tags:
        - product
      security:
        - bearerAuth: []
      x-permissions:
        - product.read
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: created_at
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of products with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPaginateResponseData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /product/{id}:
    get:
      summary: Get product by ID
      tags:
        - product
      security:
        - bearerAuth: []
      x-permissions:
        - product.read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update product by ID (including options)
      tags:
        - product
      security:
        - bearerAuth: []
      x-permissions:
        - product.update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete product by ID
      tags:
        - product
      security:
        - bearerAuth: []
      x-permissions:
        - product.delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      summary: User login
      description: Authenticate a user and return a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid username or password
  /logout:
    post:
      summary: User logout
      description: Invalidate the user's token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
components:
  schemas:
    ProductOption:
      type: object
      required:
        - id
        - name
        - code
        - quantity
        - price
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
    Product:
      type: object
      required:
        - id
        - name
        - code
        - img
        - options
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        img:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
    ProductPaginateResponseData:
      type: object
      required:
        - total
        - pages
        - page
        - limit
        - items
      properties:
        total:
          type: integer
        pages:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    ErrorResponse:
      type: object
      required:
        - message
        - error
      properties:
        message:
          type: string
        error:
          type: string
    ProductOptionCreateRequest:
      type: object
      required:
        - name
        - code
        - quantity
        - price
      properties:
        name:
          type: string
        code:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
    ProductCreateRequest:
      type: object
      required:
        - name
        - code
        - img
        - options
      properties:
        name:
          type: string
        code:
          type: string
        img:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionCreateRequest'
    ProductResponse:
      type: object
      required:
        - data
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Product'
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        img:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionCreateRequest'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
